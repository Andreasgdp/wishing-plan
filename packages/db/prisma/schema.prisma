// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ShortLink {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    url       String   @db.VarChar(2000)
    slug      String   @unique

    @@index(slug)
}

model User {
    id              String        @id
    settings        UserSettings?
    wishes          Wish[]
    wishLists       WishList[]    @relation("WishLists")
    sharedWishLists WishList[]    @relation("SharedWishLists")
    mainPlan        Plan?         @relation("MainPlan")
    plans           Plan[]        @relation("Plans")
    sharedPlans     Plan[]        @relation("SharedPlans")
}

model UserSettings {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    currency  String

    @@index([userId])
}

model Plan {
    id                 String     @id @default(cuid())
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    name               String?
    description        String?
    currentAmountSaved Int
    amountToSave       Int
    firstSaving        DateTime
    frequency          String
    user               User?      @relation(name: "Plans", fields: [userId], references: [id], onDelete: Cascade)
    userId             String?
    mainUser           User?      @relation(name: "MainPlan", fields: [mainUserId], references: [id], onDelete: Cascade)
    mainUserId         String?    @unique
    sharedWith         User[]     @relation(name: "SharedPlans")
    wishes             Wish[]
    wishBridges        PlanWish[]

    @@index([userId])
}

model PlanWish {
    id        String @id @default(cuid())
    plan      Plan   @relation(fields: [planId], references: [id], onDelete: Cascade)
    planId    String
    wish      Wish   @relation(fields: [wishId], references: [id], onDelete: Cascade)
    wishId    String
    placement Int

    @@index([planId])
    @@index([wishId])
    @@map("PlanWishBridge")
}

model Wish {
    id          String     @id @default(cuid())
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    title       String
    description String?
    price       Int
    url         String
    imageUrl    String?
    creator     User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId   String
    wishList    WishList?  @relation(fields: [wishListId], references: [id], onDelete: Cascade)
    wishListId  String?
    plan        Plan?      @relation(fields: [planId], references: [id], onDelete: Cascade)
    planId      String?
    wishBridges PlanWish[]

    @@index([creatorId])
    @@index([wishListId])
    @@index([planId])
}

model WishList {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    creatorId   String
    creator     User     @relation(name: "WishLists", fields: [creatorId], references: [id], onDelete: Cascade)
    sharedWith  User[]   @relation(name: "SharedWishLists")
    name        String
    description String
    wishes      Wish[]

    @@index([creatorId])
}

model Post {
    id      String @id @default(cuid())
    title   String
    content String
}
